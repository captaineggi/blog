<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Let Melon Ripe</title>
  
  <subtitle>Eggi&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://captn.me/"/>
  <updated>2019-04-03T13:44:31.423Z</updated>
  <id>https://captn.me/</id>
  
  <author>
    <name>eggi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【大型无聊连载】研修38天（3）</title>
    <link href="https://captn.me/posts/194de8cd.html"/>
    <id>https://captn.me/posts/194de8cd.html</id>
    <published>2019-04-03T12:40:42.000Z</published>
    <updated>2019-04-03T13:44:31.423Z</updated>
    
    <content type="html"><![CDATA[<p>人的本质就是复读机，一生走过尽是不如意。</p><p>横批：你拿生活没办法</p><p>…</p><p>今天高兴的是班里第一个发表表现还可以，虽然词藻贫乏了点但是顺利讲完了三分钟。</p><p>感谢チャラい班长的鼓励。</p><a id="more"></a><p>晚上在讨论为什么没法参加进别人对话的时候，很难释怀。回家的路上还是反省了自己，因为我多多少少还在被言語の壁困扰，语言表述上的不清晰、常常get不到日本文化上的梗。其实我如果真的有心融入他们，应该是要好好听写日语，多了解了解日本来着。</p><p>但是实际上也没有那么大动力…</p><p>这是很矛盾的一件事。嘴上说着别人不理解的同时，却不思考自己是否也有在好好理解对方吧。</p><p>不努力投资一件事，必不可能收获相应的回报。想想自己中学六年怎么学的英语，学日语就该怎么延续相同的模板。但是大学之后，无论自学什么，都不会想去自学日语。像个傻瓜吧… 当时想不出方法就只会逃避罢了。</p><p>我讨厌团体的概念。从小到大就没有抱团的习惯，中二时期还践行过独行侠生活。但不可否认的是，我喜欢聊天，和他人交换意见，听听每个人的世界观和故事。世界各地天南地北的人就更好了，跨越国籍地与人交流一直是我渴望的事情。可惜讽刺的是，人在日本反而做不到和日本人交流吧…</p><p>心理上的trauma也是导致它的原因之一吧。肯定被讨厌了，被孤立了，虽然很抱歉，还是经常会冒出这样无理的念头。太在意过去了真的不好，把自己的问题归咎与他人之责任，也是对自己不负责任的表现。</p><p>我已经不想想多了，但是我是抱着既然工作就要做最好的信念进入公司。距离这样的目标还很远很远。</p><p>如果再给我一次机会，真的不会在日本留学吧。看着这样蹩脚地说日语的自己，又开始想要嘲笑自己…</p><p>今天，有点点点累。</p><p>我真的有在进步么，不自觉地发出这样的疑惑。</p><p>ex作为日语说得特别好的韩国人，常常听不懂我蹩脚的日语，那张”你在说什么呀”的脸，令人心烦。抱着沉重的心理负担，我选择只用英语和他交流。在找到工作之后，印象特别深的是他说过，你进了日企没问题吗，公司要全说日语吧。自尊心有受到伤害吧… 像他那种只有日语好、其他都一塌糊涂的不靠谱一男的怎么有资格这样评价我？哎，回忆起这件事，忍不出思想开始走极端。恢复了心情，能明白对方也许就是不经意的关心吧。</p><p>我的人格，大概也已经不够和平不够完整了…</p><p>讨厌日本。</p><p>跑题了。</p><p>明天、后天、大后天，每天都要努力。</p><p>不过，这种重复话题的自我反省，还要进行多少回啊喂。</p><p>要乐观。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人的本质就是复读机，一生走过尽是不如意。&lt;/p&gt;
&lt;p&gt;横批：你拿生活没办法&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;今天高兴的是班里第一个发表表现还可以，虽然词藻贫乏了点但是顺利讲完了三分钟。&lt;/p&gt;
&lt;p&gt;感谢チャラい班长的鼓励。&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="https://captn.me/categories/work/"/>
    
    
      <category term="研修" scheme="https://captn.me/tags/%E7%A0%94%E4%BF%AE/"/>
    
      <category term="人际关系" scheme="https://captn.me/tags/%E4%BA%BA%E9%99%85%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>【大型无聊连载】研修38天（2）</title>
    <link href="https://captn.me/posts/a1f18fa8.html"/>
    <id>https://captn.me/posts/a1f18fa8.html</id>
    <published>2019-04-02T15:19:23.000Z</published>
    <updated>2019-04-02T22:24:50.829Z</updated>
    
    <content type="html"><![CDATA[<p>自我介绍皆是开朗少年爱跑步，喝点小酒却是懒狗一个オタク</p><p>横批：你和日常</p><a id="more"></a><p>…</p><p>飲み会回来太晚了，简洁点说好了。</p><p>同桌的庆应女从第一天开始带头孤立我还行，不过习惯了这种事倒没啥感觉。</p><p>今天勇敢了一些开始向周围数个人搭话。</p><p>真的可惜分到一个人都不熟悉的班级，尤其同桌坐了个这样的，后面还是个超チャラい的班级代表（没错这种人会被选为代表）。</p><p>公司介绍了各种福利厚生，但对外国人有用的不多。</p><p>我们的傻子班长研修结束了才说大家一起去飲み会吧，虽然地方还没定。</p><p>真的不靠谱的家伙…</p><p>不参加不行，反过来我还蛮想参加的… 不喝酒的时候就没有人主动愿意跟我说话的，喝酒是打破僵局的最好方法了。</p><p>虽然这次聚餐上也就多认识了四五个人但也足够了。如在（1）中提到的，我和日本人能说上话就是一件非常庆幸的事情。日本人身上特容易出现的陋习就是视野狭隘，极易孤立自己不了解的事物，并迅速抱团跟风。能宽容地听我说日语并回应的各位，我真的非常感谢。</p><p>和一个理科男狂聊安卓手机和系统，和另一个理科男是偶像和动漫。理科生真好… 真的，搞技术的就是单纯（完全偏见）。垃圾文科！（住手）</p><p>顺带记录一个聊天技巧就是夸别人センスいい、おしゃれ。电车上和一个同期就帅气男士手表展开和谐讨论。别的スーツ也好，妆容发型也好，这个话题真的好用。</p><p>以上。</p><p>4/3早晨的追记：</p><p>とりあえずあやまる在日常场景中也是好用的技巧，总之先道歉，能传达一种配慮对方的感觉吧。</p><p>但，不管昨天的飲み会如何热闹，飲み会只是飲み会，公司场景下的社交继续努力。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自我介绍皆是开朗少年爱跑步，喝点小酒却是懒狗一个オタク&lt;/p&gt;
&lt;p&gt;横批：你和日常&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="https://captn.me/categories/work/"/>
    
    
      <category term="研修" scheme="https://captn.me/tags/%E7%A0%94%E4%BF%AE/"/>
    
      <category term="人际关系" scheme="https://captn.me/tags/%E4%BA%BA%E9%99%85%E5%85%B3%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>【大型无聊连载】研修38天（1）</title>
    <link href="https://captn.me/posts/774ee5f7.html"/>
    <id>https://captn.me/posts/774ee5f7.html</id>
    <published>2019-04-01T12:20:39.000Z</published>
    <updated>2019-04-01T13:29:05.312Z</updated>
    
    <content type="html"><![CDATA[<p>社长说话很无聊，台下社员齐睡觉</p><p>横批：skrskr</p><a id="more"></a><p>…</p><p>走进教室，看见同桌的女同期活泼且熟稔地喊着周围人的名字，心里便暗叫不好。</p><p>从沉默到偷摸加入他们的话题花了20分钟。漫长、漫长的20分钟…</p><p>总之交流这件事，尤其在和日本人交流这件事上，对我而言，很看缘分。放了学（虽然你也可以称之为下班），看到了几张熟悉的面孔，立刻上前打招呼，日语会话能力瞬间攀升，腰不酸腿不痛人不自闭了。我这个人唯一的优点算是会记名字，看到他们直接叫出昵称，然而对方竟露出记不得我名字的慌乱的脸，心情瞬间复杂！</p><p>人見知り（？）的毛病得从今天开始慢慢克服。</p><p>不管怎么说，作为同期，附近的人已经很给面子认真听我讲话了，也足够亲切。想想以前碰到的那些人，看我不怎么说话有的就直接无视我了。说话要更大声、更自信，提问和表述要更有条理，挨拶要更得体。有点出息吧，畏畏缩缩算什么男人（？）。</p><p>喜欢工作。所以和在学校不同，想好好成长。</p><p>今天的分量到此为止。</p><p>如果有人每天一起监督学习就好了，四月下旬的资格考试真令人头大…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;社长说话很无聊，台下社员齐睡觉&lt;/p&gt;
&lt;p&gt;横批：skrskr&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="https://captn.me/categories/work/"/>
    
    
      <category term="研修" scheme="https://captn.me/tags/%E7%A0%94%E4%BF%AE/"/>
    
  </entry>
  
  <entry>
    <title>写在入社前前夜</title>
    <link href="https://captn.me/posts/ffd1f47e.html"/>
    <id>https://captn.me/posts/ffd1f47e.html</id>
    <published>2019-03-30T15:53:19.528Z</published>
    <updated>2019-04-01T13:06:42.393Z</updated>
    
    <content type="html"><![CDATA[<p>小喝完一通酒觉得是时候总结一下大学四年半，醒了醒，这几年大大小小的破烂事儿从脑里的记忆隧道嗖地蹿过去，但总感觉隧道里的小车，装着的都是相似的人相似的事情。</p><p>人会变吗？永远不会变吗？个人倾向于后一个答案。我最讨厌回想起高中的自己，但是但凡自问自己的性格，第一个蹦出来的也是那个15岁到17岁的形象。平常装模作样的、和朋友在一起便口无遮拦的、在重要的人和事面前却怯怯懦懦的，那样一个自己。</p><a id="more"></a><p>大一大二的时候，从小日子过得太好的自己没少被新环境教训。在数次失败的社交、学习、打工经历之后，害怕说日语、害怕在日本、总之想逃出这个国家，这样的心情是那样急迫真切。以至于到现在，都没有日本人朋友，反倒是教会、学校的外籍友人认识了一大把。缩在熟悉的英文圈和中文圈里，在朋友面前装作坦坦荡荡，”反正以后不会呆在这个国家的”，大话说得特决绝。</p><p>就是这样一个胆小的人吧。我感觉自己没有变。</p><p>大三因为一些特殊契机，迅速决定在日本找工作，计划变化之快连自己都害怕几分。日语破碎得连打餐厅预约电话都不自信的我，就这样从0开始踏上就活之路。学校没有就活的小伙伴，每周上学也上不了几回，唯一的支柱就是日语上指点我的阿万。几十场的大中小公司说明会、座谈会、面试，几十场的失败、失落、失语。”我到底是为了谁找工作呢”，不是为别人，就是为自己啊。但是那副孤零零一个人战斗的样子，真是可怜啊。时常像评价第三者一样，嘲笑着自己。</p><p>因为任性而改变的人生轨迹。为之独自逞强的自己，又做作又惨淡。我感觉我没有变。</p><p>就活后的半年没有认识任何新朋友。是真切的只属于自己的半年时光。校园里的老朋友们奔走在其他国家，每天断断续续地手机联络。一周里懒散地出发去学校，上几门自己心仪的课，在图书馆学完公司的学习任务，按部就班地在固定几家中餐吃饭。</p><p>固执地想要守护这份孤单的快乐，保护敏感的自己。</p><p>就是这样的自己也居然要踏入社会了(此处忍不住发233)。都说朋友圈里”报喜不报忧”，我是真觉得自己把这五个字在人生里贯彻了二十二年。</p><p>事到如今，确实是一个节点进行一次了断。不是说，抛弃自己的这份人格，它没有错，我相信它是刻在我基因里的”我”。而是，我很脆弱，我很平凡，我很孤单。这是我必须直面的一组词。</p><p>把这些傻里傻气的文字展现出来真的是一种正确的矫正方式吗？我不清楚，但也许，是对自己的一次解脱，对真心关爱自己的人的一次坦白。</p><p>好好努力，好好生活，堂堂正正地活着吧，你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小喝完一通酒觉得是时候总结一下大学四年半，醒了醒，这几年大大小小的破烂事儿从脑里的记忆隧道嗖地蹿过去，但总感觉隧道里的小车，装着的都是相似的人相似的事情。&lt;/p&gt;
&lt;p&gt;人会变吗？永远不会变吗？个人倾向于后一个答案。我最讨厌回想起高中的自己，但是但凡自问自己的性格，第一个蹦出来的也是那个15岁到17岁的形象。平常装模作样的、和朋友在一起便口无遮拦的、在重要的人和事面前却怯怯懦懦的，那样一个自己。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://captn.me/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo博客SEO优化之问题与解决</title>
    <link href="https://captn.me/posts/4c40ffe7.html"/>
    <id>https://captn.me/posts/4c40ffe7.html</id>
    <published>2018-12-06T15:54:04.000Z</published>
    <updated>2019-04-01T13:06:59.299Z</updated>
    
    <content type="html"><![CDATA[<p>前天花了五六个小时完成了博客的SEO，本以为照着教程做应该很快结束，奈何中途阻碍重重，大部分时间花在寻找和解决<del>（愚蠢的）</del>问题上。</p><p>本文仅作总结，不从头讲解如何配置，网上有不少优秀的教程。我大多参考的是这位网友的文章：</p><p><a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" title="Hexo博客SEO教程" target="_blank" rel="noopener">Hexo博客Next主题SEO优化方法</a></p><p>那么接下来谈谈优化过程中遇到的两个主要问题和解决方法。</p><a id="more"></a><hr><h2 id="站点所有权验证"><a href="#站点所有权验证" class="headerlink" title="站点所有权验证"></a>站点所有权验证</h2><p>向谷歌提交站点之后，需要进行网站所有权验证。谷歌提供了以下五种验证方式：</p><p><img src="https://raw.githubusercontent.com/captaineggi/captaineggisub/master/2018-12/1812071.png" alt=""></p><p>大多数教程使用的是前两种方法，尝试多次，谷歌始终验证失败；第三第四种方法要使用到第三方工具，懒得用；第五种方法则看起来简单直白，也不用修改网站配置文件，对有独立域名的人很友好。</p><p>介绍一下具体DNS配置方法，各家厂商的设置应该都大同小异（本站域名挂在Namecheap）。</p><ol><li><p>进入<code>Domain List</code>找到域名；</p></li><li><p>进入<code>Manage -&gt; Advanced DNS</code>；</p></li><li><p>复制谷歌提供的TXT记录，添加到<code>Host Records</code>下面。</p><p>书写方法：</p></li></ol><table><thead><tr><th style="text-align:center">Type</th><th style="text-align:center">Host</th><th style="text-align:center">Value</th><th style="text-align:center">TTL</th></tr></thead><tbody><tr><td style="text-align:center">TXT Record</td><td style="text-align:center">@</td><td style="text-align:center">(Paste TXT Record here)</td><td style="text-align:center">Automatic</td></tr></tbody></table><ol start="4"><li>最后保存一下，返回Search Console，就可以完成验证了。</li></ol><hr><h2 id="添加-测试站点地图（sitemap）"><a href="#添加-测试站点地图（sitemap）" class="headerlink" title="添加/测试站点地图（sitemap）"></a>添加/测试站点地图（sitemap）</h2><p>这里是花了我最长时间的地方，安装了<code>hexo-generator-sitemap</code>插件，生成的<code>sitemap.xml</code>文件在测试时总是被检测出error：</p><blockquote><p>“This is not a valid URL. Please correct it and resubmit.”</p></blockquote><p>博客里每一条URL都被认定为无效url，让人摸不着头脑…</p><p>于是我参考了<a href="https://dynomapper.com/blog/13-create-sitemaps/232-how-to-troubleshoot-sitemaps" title="谷歌站点地图错误分析" target="_blank" rel="noopener">25 Troubleshooting Tips for Sitemaps</a>，其中说到出现无效url的原因是，url中混入了不支持的字符、空格、引号等影响了code的可读性，或是链接本身无法加载（服务器出现问题或者干脆配置文件里域名打错了）。</p><p>由此，我浏览了<code>sitemap.xml</code>文件，乍一看并没有发现任何特殊符号：</p><p><img src="https://github.com/captaineggi/captaineggisub/blob/master/2018-12/1812061.png?raw=true" alt=""></p><p>没有特殊符号，说明问题不是出在空格符号就是链接本身上面。测试了各个url，都能正常访问，最终锁定到空格上。打开<code>./node_modules/hexo-generator-sitemap/sitemap.xml</code>，这是插件自带的模板。</p><p>一开始用Sublime打开检查，完全没发现任何异常，其后用Typora（感谢Typora…）发现了不一样的空格，显示出来是一个个红点。当时没截图，翻了下电脑里其他md文件，找到了一样的红点：</p><p><img src="https://raw.githubusercontent.com/captaineggi/captaineggisub/master/2018-12/1812072.png" alt=""></p><p>应该就是tab字符… 把模板文件中所有tab字符删了之后重新生成<code>sitemap.xml</code>，测试成功！</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>折腾出了结果让人非常欣慰，不然一下午又白费了。</p><p>关于<code>sitemap.xml</code>还有想说的，就是其格式很严谨，它的protocol在这里：</p><p><a href="https://www.sitemaps.org/protocol.html" title="站点地图xml格式规则" target="_blank" rel="noopener">Sitemaps XML format</a></p><p>用什么字符编码、用什么标签、什么网址算作有效，都有非常非常详细的定义，遇到问题，网上也没搜到答案的话可以直接参考它。</p><p>另外，<code>hexo-generator-sitemap</code>插件好久好久没更新了，出现小问题也是正常的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前天花了五六个小时完成了博客的SEO，本以为照着教程做应该很快结束，奈何中途阻碍重重，大部分时间花在寻找和解决&lt;del&gt;（愚蠢的）&lt;/del&gt;问题上。&lt;/p&gt;
&lt;p&gt;本文仅作总结，不从头讲解如何配置，网上有不少优秀的教程。我大多参考的是这位网友的文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html&quot; title=&quot;Hexo博客SEO教程&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo博客Next主题SEO优化方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么接下来谈谈优化过程中遇到的两个主要问题和解决方法。&lt;/p&gt;
    
    </summary>
    
      <category term="technique" scheme="https://captn.me/categories/technique/"/>
    
    
      <category term="Hexo" scheme="https://captn.me/tags/Hexo/"/>
    
      <category term="SEO" scheme="https://captn.me/tags/SEO/"/>
    
  </entry>
  
  <entry>
    <title>C语言之初识指针</title>
    <link href="https://captn.me/posts/6c5bd191.html"/>
    <id>https://captn.me/posts/6c5bd191.html</id>
    <published>2018-12-03T11:13:47.000Z</published>
    <updated>2019-04-01T13:06:52.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Contents related:</strong> </p><ul><li><p>§5.1-2 of <em>The C Programming (2nd Edition)</em> aka <em>C程序设计语言(第二版)</em> by Kernighan &amp; Ritchie</p></li><li><p>Lecture slide §10 of <em>Introduction to C Programming</em> by Simo-Serra, retrieved from <a href="https://esslab.jp/~ess/teaching/2018/intro_c_program/10.html" target="_blank" rel="noopener">https://esslab.jp/~ess/teaching/2018/intro_c_program/10.html</a></p></li></ul></blockquote><p>这周课上第一次接触指针(pointer)，琢磨透这个玩意儿大概花了三个小时… 本文通过一道有关double pointer的习题，来初步理解一系列概念。</p><a id="more"></a><hr><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>指针本身并不复杂，但是定义上很容易搞混，在此引用一下课本中片段(Kernighan &amp; Ritchie, p.94)来加深印象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>, y = <span class="number">2</span>, z[<span class="number">10</span>]; </span><br><span class="line"><span class="keyword">int</span> *ip; <span class="comment">/* ip is a pointer to int */</span></span><br><span class="line">ip = &amp;x;<span class="comment">/* ip now points to x */</span></span><br><span class="line">y = *ip;<span class="comment">/* y is now 1 */</span></span><br><span class="line">*ip = <span class="number">0</span>;<span class="comment">/* x is now 0 */</span></span><br><span class="line">ip = &amp;z[<span class="number">0</span>];<span class="comment">/* ip now points to z[0] */</span></span><br></pre></td></tr></table></figure><p>再简单些概括，即：</p><ol><li><code>int *ip</code>仅用于宣告ip是个整数指针；</li><li><code>ip=&amp;x</code>存着x的位置；</li><li><code>y=*ip</code>将x的值映射到y，</li></ol><p>云云。</p><p>那么接下来就进入习题吧。该题来自于课堂课件中的Excercise 2。</p><h2 id="Exercise-swapping"><a href="#Exercise-swapping" class="headerlink" title="Exercise: swapping"></a>Exercise: swapping</h2><p>原题：</p><blockquote><p><code>swap_nums</code> works but <code>swap_pointers</code> does not. Fix it. </p></blockquote><p>错误的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_nums</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> tmp;</span><br><span class="line">     tmp = *x;</span><br><span class="line">     *x = *y;</span><br><span class="line">     *y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_pointers</span><span class="params">(<span class="keyword">char</span> *x, <span class="keyword">char</span> *y)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">char</span> *tmp;</span><br><span class="line">     tmp = x;</span><br><span class="line">     x = y;</span><br><span class="line">     y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a=<span class="number">3</span>, b=<span class="number">4</span>;</span><br><span class="line">     <span class="keyword">char</span> *s1, *s2;</span><br><span class="line">     swap_nums(&amp;a,&amp;b);</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"a is %d\nb is %d\n"</span>, a, b);</span><br><span class="line">     s1 = <span class="string">"I should print second"</span>;</span><br><span class="line">     s2 = <span class="string">"I should print first"</span>;</span><br><span class="line">     swap_pointers( s1, s2 );</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">"s1 is %s\ns2 is %s\n"</span>, s1, s2);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接来看<code>swap_pointers</code>的问题：</p><ol><li><p>第21行<code>swap_pointers(s1, s2)</code>没有将两实际参数的指针赋值给第8行<code>swap_pointers(char *x, char *y)</code>。那么，s1、s2两者交换后的结果仅被拷贝在形式参数x、y中，对实参本身的值没有影响。应修正第21行<code>swap_pointers(&amp;s1, &amp;s2)</code>；</p></li><li><p>相应的，第9~12行错误就很明显了。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = &amp;s1;<span class="comment">/* s1 itself's address */</span></span><br><span class="line">y = &amp;s2;<span class="comment">/* s2 itself's address */</span></span><br><span class="line">*x = "I should print second"'s address;</span><br><span class="line">*y = "I should print first"'s address;</span><br></pre></td></tr></table></figure><p>s1、s2互相交换自身的位置是没有用的，要改变指代的字符串的位置才行。因而<code>x -&gt; *x</code>，<code>y -&gt; *y</code>；</p></li><li><p>s1、s2本来就是指针，因而指针的指针(pointer’s pointer)应该以double pointer的形式呈现出来，即修正第8行<code>void swap_pointers(char **x, char **y)</code>。</p></li></ol><p>最后，值得注意的是，因为x和y都是指针，所以临时参数tmp也是指针以储存/传递位置的值。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>这一部分遗留的不解之处是，为什么作为指针的s1、s2能直接表示整个字符串的值？兼有两个功能总觉得矛盾…（运行了一下发现<code>*s1</code>表示的是”i”，即字符串的第一个字符）。具体的原因再探讨吧orz，感觉涉及到char和string的转换了，还没学到。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Contents related:&lt;/strong&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;§5.1-2 of &lt;em&gt;The C Programming (2nd Edition)&lt;/em&gt; aka &lt;em&gt;C程序设计语言(第二版)&lt;/em&gt; by Kernighan &amp;amp; Ritchie&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lecture slide §10 of &lt;em&gt;Introduction to C Programming&lt;/em&gt; by Simo-Serra, retrieved from &lt;a href=&quot;https://esslab.jp/~ess/teaching/2018/intro_c_program/10.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://esslab.jp/~ess/teaching/2018/intro_c_program/10.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;这周课上第一次接触指针(pointer)，琢磨透这个玩意儿大概花了三个小时… 本文通过一道有关double pointer的习题，来初步理解一系列概念。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="https://captn.me/categories/programming/"/>
    
    
      <category term="C" scheme="https://captn.me/tags/C/"/>
    
      <category term="指针" scheme="https://captn.me/tags/%E6%8C%87%E9%92%88/"/>
    
  </entry>
  
  <entry>
    <title>C程序设计语言§1.5.3-4总结</title>
    <link href="https://captn.me/posts/c318d679.html"/>
    <id>https://captn.me/posts/c318d679.html</id>
    <published>2018-11-12T12:34:38.000Z</published>
    <updated>2019-04-01T13:06:47.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Contents related:</strong> §1.5.3-4 of <em>The C Programming (2nd Edition)</em> aka <em>C程序设计语言(第二版)</em> by Kernighan &amp; Ritchie</p></blockquote><p>C程序设计语言这本书实在太难啃了… 基础知识不牢固，等我消化完两节内容后一下午过去了…</p><p>§1.5.3-4介绍了Line Counting和Word Counting的基本思路。本文围绕Exercise1-9和§1.5.4中的例子，来进行知识点巩固。</p><a id="more"></a><hr><h2 id="§1-5-3-Exercise1-9"><a href="#§1-5-3-Exercise1-9" class="headerlink" title="§1.5.3 Exercise1-9"></a>§1.5.3 Exercise1-9</h2><p>原题：</p><blockquote><p>Write a program to copy its input to its output, replacing each string of one or more blanks by a single blank.</p></blockquote><p>概括题意则为，用单一空格代替input中的连续空格，以达到文章美观、间接的效果。</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> c, lastc;</span><br><span class="line"><span class="comment">/* 设lastc为前一字符，赋值EOF意味着它不可能为空格，</span></span><br><span class="line"><span class="comment">且不会与任何字符值重合 */</span></span><br><span class="line">lastc = EOF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((c = getchar()) != EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 如读取的字符不为空格，</span></span><br><span class="line"><span class="comment">则其多为单词和换行符，正常输出即可 */</span></span><br><span class="line"><span class="keyword">if</span> (c != <span class="string">' '</span>)</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 如读取的字符为空格，</span></span><br><span class="line"><span class="comment">且前一字符不为空格（即该空格紧邻单词末尾）时，输出该空格; </span></span><br><span class="line"><span class="comment">如前一字符仍为空格，则其属于重复空格，不必输出 */</span></span><br><span class="line"><span class="keyword">if</span> (lastc != <span class="string">' '</span>)</span><br><span class="line"><span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 赋值lastc为c，如c为非空格字符，</span></span><br><span class="line"><span class="comment">那么lastc用于检验并输出紧邻下一个单词的空格；</span></span><br><span class="line"><span class="comment">如c为空格字符，即' '，</span></span><br><span class="line"><span class="comment">则再次检验else中条件，得出不必输出接下来的空格 */</span></span><br><span class="line">lastc = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="§1-5-4-Example"><a href="#§1-5-4-Example" class="headerlink" title="§1.5.4 Example"></a>§1.5.4 Example</h2><p>原文描述：</p><blockquote><p>This is a bare-bones version of the UNIX program <code>we</code>.</p></blockquote><p>原文代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IN 1<span class="comment">/* inside a word */</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OUT 0<span class="comment">/* outside a word */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* count lines, words, and characters in input */</span></span><br><span class="line">main() </span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">int</span> c, nl, nw, nc, state;</span><br><span class="line"></span><br><span class="line">state = OUT; </span><br><span class="line">nl = nw = nc = <span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> ((c = getchar()) != EOF) &#123;</span><br><span class="line">++nc;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'\n'</span>)</span><br><span class="line">++nl; </span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">' '</span> || c == <span class="string">'\n'</span> || c = <span class="string">'\t'</span>)</span><br><span class="line">state = OUT; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (state == OUT) &#123;</span><br><span class="line">state = IN;</span><br><span class="line">++nw; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, nl, nw, nc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>值得注意的有以下几点：</p><ol><li><p>这是一个对多个类型数值（line, word, char）进行计数的程序，要看清各行代码的功能。如：</p><p>14行 <code>if (c == &#39;\n&#39;)</code> 用于识别换行符计入行数，而</p><p>16行 <code>if (c == &#39; &#39; || c == &#39;\n&#39; || c = &#39;\t&#39;)</code> 则单纯为识别出escape sequence；</p></li><li><p><code>state</code> 的设置非常巧妙。当字符为escape sequence时，此时自然是处于单词外的。</p><p>但当字符不为escape sequence，且 <code>state</code> 依然为 <code>OUT</code> 时，则代表这里为单词的首字母，随即将其值变更为 <code>IN</code> ，以避免单词的后几位字母被重复计入 <code>nw</code> 。</p><p>而当一单词被读取完毕，开始读取下一escape sequence时， <code>state</code> 变为 <code>OUT</code>，不计入 <code>nw</code> 。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本两节的重点为：</p><ol><li>借用third variable来灵活探索前后字符关系；</li><li>通过设置binary variable来识别不同属性的字符。</li></ol><p>妙啊，妙啊！（（（</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Contents related:&lt;/strong&gt; §1.5.3-4 of &lt;em&gt;The C Programming (2nd Edition)&lt;/em&gt; aka &lt;em&gt;C程序设计语言(第二版)&lt;/em&gt; by Kernighan &amp;amp; Ritchie&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;C程序设计语言这本书实在太难啃了… 基础知识不牢固，等我消化完两节内容后一下午过去了…&lt;/p&gt;
&lt;p&gt;§1.5.3-4介绍了Line Counting和Word Counting的基本思路。本文围绕Exercise1-9和§1.5.4中的例子，来进行知识点巩固。&lt;/p&gt;
    
    </summary>
    
      <category term="programming" scheme="https://captn.me/categories/programming/"/>
    
    
      <category term="C" scheme="https://captn.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>电子记忆</title>
    <link href="https://captn.me/posts/835decd.html"/>
    <id>https://captn.me/posts/835decd.html</id>
    <published>2018-10-21T14:18:20.000Z</published>
    <updated>2019-04-01T13:06:37.319Z</updated>
    
    <content type="html"><![CDATA[<p>从我二代希捷硬盘的文件夹信息上来看，我最早的一次照片备份可以追溯到2009年。</p><p>开始备份的起因，大概就是那个我爸在珠江路电子商城给我买的东芝移动硬盘。小时候我爸比较小气，就算我求着想要某些电子产品，但几乎没给我买过。不过移动硬盘，是吧，比较实用。那个外壳艳红艳红、黑色保护包上画了阿童木的硬盘，实在不美观，但是好歹也是价值500元的祖宗。美滋滋地抱回家，我爸给了我一个任务：把家里佳能数码相机的照片备份一下。</p><a id="more"></a><p>500G的硬盘，存完数码相机的照片，果然还是显得空荡，不如把小学的作文也存一遍。几十篇作文也不过数M，那接着再存诺基亚手机里的照片（如果没有记错那时是用读卡器读取文件）。这就是长途备份之旅的开端。</p><p>现实生活里我其实不是特别整洁的人。但是由于例行公事的备份习惯，使我在数据储存方面有着超乎一般人的执念：一个都不能落。信息、照片自不必说，初中时候手写的文字也是一篇篇传上博客、再备份回移动硬盘。上了高中，第一次接触安卓手机，相继使用HTC ChaCha、G11和Xperia Z1，存储的文件更加碎片化，备份上也是更要加大力度，以免疏漏。</p><p>可真正意识到备份的珍贵之处，是从婆婆去世后开始的。有一天，也是在照常整理相机和手机里的照片，我把光标拉到文件夹底部，突然发现了一个只有几秒的视频文档，点进去居然是拍婆婆的。应该是我有了新手机之后，用来测试录像效果的。视频里婆婆摆了摆手，让我别拍。</p><p>哎，仅仅是几秒罢了，但当时一下就掉眼泪了。睹物思情，更何况那些活生生的能动的影像。很俗套吧，但自此之后，每一次备份行为就带着一份信念了，不放过任何生命中的有可能轻易被自己忘却的小小回忆。其实这个观点也很大程度上影响了我拍照的态度。摆弄镜头，越发不纠结色彩、构图的质量好坏，不糊即可，重要的是留下这一刻，让机械替代我，好好记下它吧。</p><p>如今作为继任者的希捷也四岁多了，杞人忧天的我总是怕它哪天就坏了。每每备份，看着越来越多的项目数，心情也会变得焦躁，这小小的一块板子，承载的东西未免过于沉重，一旦失去，就是连着带走九年的记忆。所以近些日子，一直在考虑如何保护、保全数据。</p><p>云存储当然是不错的选择，但是总量过了100、200G，几年下来也是不小的开销；能基于VPS搭建私人云盘是一种选择，但找到安全、稳定又廉价的存储型VPS商家显然是天方夜谭；最后想到的果然还是购入NAS，本地家用服务器上建立云盘系统。这是个只需一次性投资便可长期运行的产品，但坏消息是，在灾害重重的日本，我需要多些考量去保障它的安全。好消息是，并不是没有方案去维护，只要勤于动手动脑，我个人感觉应该是没有太大问题的。</p><p>希望在接下来的半年里，好好收拾家里、好好学习硬件知识，搬家之后买个NAS，搭一个令人安心的云存储系统，圆自己一个梦。折叠在机械元件里的温柔的、有序的梦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从我二代希捷硬盘的文件夹信息上来看，我最早的一次照片备份可以追溯到2009年。&lt;/p&gt;
&lt;p&gt;开始备份的起因，大概就是那个我爸在珠江路电子商城给我买的东芝移动硬盘。小时候我爸比较小气，就算我求着想要某些电子产品，但几乎没给我买过。不过移动硬盘，是吧，比较实用。那个外壳艳红艳红、黑色保护包上画了阿童木的硬盘，实在不美观，但是好歹也是价值500元的祖宗。美滋滋地抱回家，我爸给了我一个任务：把家里佳能数码相机的照片备份一下。&lt;/p&gt;
    
    </summary>
    
      <category term="life" scheme="https://captn.me/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>New Start</title>
    <link href="https://captn.me/posts/deab04e1.html"/>
    <id>https://captn.me/posts/deab04e1.html</id>
    <published>2018-07-06T03:33:04.000Z</published>
    <updated>2019-04-01T13:07:03.478Z</updated>
    
    <content type="html"><![CDATA[<p>昨天，把租了两年的VPS撤了，正式搬入github pages+hexo。开始学习更多知识！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天，把租了两年的VPS撤了，正式搬入github pages+hexo。开始学习更多知识！&lt;/p&gt;

      
    
    </summary>
    
      <category term="life" scheme="https://captn.me/categories/life/"/>
    
    
  </entry>
  
</feed>
